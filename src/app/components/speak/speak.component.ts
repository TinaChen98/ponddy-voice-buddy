import {Component, ChangeDetectionStrategy, ChangeDetectorRef, OnInit, OnDestroy} from '@angular/core';
import {BehaviorSubject, Subscription} from 'rxjs';

import {StateProvider} from '../../../core/providers/state.provider';
import {AudioProvider} from '../../../core/providers/audio.provider';
import {LoadingProvider} from '../../../core/providers/loading.provider';
import {PredictProvider} from '../../../core/providers/predict.provider';
import {ErrorProvider} from '../../../core/providers/error.provider';
import {AsrResponseInterface, DiagnosisResponseInterface} from '../../../core/interfaces';
import {SentenceProvider} from '../../../core/providers/sentence.provider';
import { MatDialog } from '@angular/material/dialog';
import { SpeakDialog } from './speak-popup.component';
import { DomSanitizer } from '@angular/platform-browser';

@Component({
  selector: 'app-speak',
  templateUrl: './speak.component.html',
  styleUrls: ['./speak.component.scss'],
  changeDetection: ChangeDetectionStrategy.OnPush,
})
export class SpeakComponent implements OnInit, OnDestroy {
  public isRecording: boolean;
  public isAiPlayback: boolean;
  public isUserPlayback: boolean;
  public userAudio: any = null;
  public currentText: string;
  public asrResponse: AsrResponseInterface;
  currentSentence
  sentenceList
  connectedWords
  playState = false
  savedState = false
  ipa
  practicePin;
  practice;
  nowRate = 1;
  nowLanguage;

  languages = [
    { id: 1, text: 'Play Audio', button: false, lang: 'en' },
    { id: 1, text: '播放', button: false, lang: 'zh-TW' },
    { id: 2, text: 'Record', button: false, lang: 'en' },
    { id: 2, text: '錄製', button: false, lang: 'zh-TW' },
    { id: 3, text: 'Stop', button: false, lang: 'en' },
    { id: 3, text: '停止', button: false, lang: 'zh-TW' },
    { id: 4, text: 'Automatically generated by Ponddy TTS', button: false, lang: 'en' },
    { id: 4, text: 'Ponddy TTS 自動產生', button: false, lang: 'zh-TW' },
    { id: 5, text: 'Microphone access setting', button: false, lang: 'en' },
    { id: 5, text: '麥克風權限設定', button: false, lang: 'zh-TW' },
    { id: 6, text: 'Tips for achieving high scores', button: false, lang: 'en' },
    { id: 6, text: '獲得高分的秘訣', button: false, lang: 'zh-TW' },
    { id: 7, text: 'Start Scoring', button: false, lang: 'en' },
    { id: 7, text: '開始評分', button: false, lang: 'zh-TW' },
  ]

  private currentTextSubscription: Subscription;
  private savedStateSubscription: Subscription;
  private isAiPlayingSubscription: Subscription;
  private isUserPlayingSubscription: Subscription;
  private userAudioSubscription: Subscription;
  private isRecordingSubscription: Subscription;
  private connectedWordsSubscription: Subscription;
  private asrResponseSubscription: Subscription;
  private practiceLog: Subscription;

  constructor(
    private readonly stateProvider: StateProvider,
    private readonly cdr: ChangeDetectorRef,
    private readonly audioProvider: AudioProvider,
    private readonly loadingProvider: LoadingProvider,
    private readonly predictProvider: PredictProvider,
    private readonly errorProvider: ErrorProvider,
    private readonly sentenceProvider: SentenceProvider,
    public dialog: MatDialog,
    private readonly sanitizer: DomSanitizer,
  ) {
  }

  public ngOnInit(): void {
    this.stateProvider.setLanguage$.asObservable().subscribe(setLanguage => {
      this.nowLanguage = setLanguage;
      this.cdr.detectChanges();
    });

    localStorage.setItem('activeStep', '1')
    this.practicePin = localStorage.getItem('practice');

    if(localStorage.getItem('userAudio') != null) {
      console.log('userAudio: null')
      // pinState
      this.savedState = JSON.parse(localStorage.getItem('savedState'));
      this.stateProvider.savedState$.next(this.savedState);

      this.currentSentence = JSON.parse(localStorage.getItem('currentSentence'));
      if(this.currentSentence) {
        this.sentenceList = this.currentSentence.content.split(" ");
      }
      let base64 = localStorage.getItem('base64');
      this.audioProvider.base64$.next(base64);

      this.userAudio = localStorage.getItem('userAudio');
      const escapedUrl = this.sanitizer.bypassSecurityTrustUrl(base64);
      this.stateProvider.userAudio$.next(escapedUrl);
      this.playState = true;

      this.stateProvider.generatedAudio$ = new BehaviorSubject(JSON.parse(localStorage.getItem('tts')));

      this.cdr.detectChanges();
    } else {
      this.currentTextSubscription = this.stateProvider.currentSentence$.asObservable().subscribe(currentSentence => {
        this.currentSentence = currentSentence;
        localStorage.setItem('currentSentence', JSON.stringify(this.currentSentence));
        if(this.currentSentence) {
          this.sentenceList = this.currentSentence.content.split(" ");
        }
        this.cdr.detectChanges();
      });

      // pinState
      this.savedStateSubscription = this.stateProvider.savedState$.asObservable().subscribe(savedState => {
        this.savedState = savedState
        localStorage.setItem('savedState', JSON.stringify(this.savedState));
        this.cdr.detectChanges();
      });

      this.userAudioSubscription = this.stateProvider.userAudio$.asObservable().subscribe(userAudio => {
        this.userAudio = userAudio;
        localStorage.setItem('userAudio', JSON.stringify(this.userAudio));
        this.cdr.detectChanges();
      });

      // playVoice
      this.predictProvider.generateWav(this.currentSentence.content).subscribe(
        generated => {
          this.playState = true
          localStorage.setItem('tts', JSON.stringify(generated))
          this.cdr.detectChanges();
        },
        error => {
          console.error({error});
          this.loadingProvider.stopLoading();
          console.log(error);
        },
      );
    }

    this.isUserPlayingSubscription = this.audioProvider.isUserPlaying$.asObservable().subscribe(isUserPlaying => {
      this.isUserPlayback = isUserPlaying;
      localStorage.setItem('isUserPlayback', JSON.stringify(this.isUserPlayback));
      this.cdr.detectChanges();
    });

    this.isAiPlayingSubscription = this.audioProvider.isAiPlaying$.asObservable().subscribe(isAiPlaying => {
      this.isAiPlayback = isAiPlaying;
      this.cdr.detectChanges();
    });

    this.isRecordingSubscription = this.audioProvider.isRecording$.asObservable().subscribe(isRecording => {
      this.isRecording = isRecording;
      this.cdr.detectChanges();
    });

  }

  public ngOnDestroy(): void {
    this.audioProvider.isRecording$.next(false);
    if (this.currentTextSubscription) {
      this.currentTextSubscription.unsubscribe();
    }

    if (this.isAiPlayingSubscription) {
      this.isAiPlayingSubscription.unsubscribe();
    }

    if (this.isUserPlayingSubscription) {
      this.isUserPlayingSubscription.unsubscribe();
    }

    if (this.userAudioSubscription) {
      this.userAudioSubscription.unsubscribe();
    }

    if (this.isRecordingSubscription) {
      this.isRecordingSubscription.unsubscribe();
    }

    if (this.asrResponseSubscription) {
      this.asrResponseSubscription.unsubscribe();
    }
  }

  // 前端調整 TTS 播放速度
  playRate() {
    const obj = document.querySelector('audio');
    const rate = document.querySelector('#rate');
    obj.playbackRate = Number((rate as HTMLInputElement).value)
    this.nowRate = obj.playbackRate;
  }

  public playAi(): void {
    this.audioProvider.playAiAudio();
  }

  public stopAi(): void {
    this.audioProvider.stopAiAudio();
  }

  public playUser(): void {
    this.audioProvider.playUserAudio();
  }

  public stopUser(): void {
    this.audioProvider.stopUserAudio();
  }

  public record(): void {
    let errorStatus = this.audioProvider.toggleRecord();

    errorStatus.then((value) => {
      if(value === 'error') {
        this.openDialog('openVoice')
      } else {
        // this.audioProvider.toggleRecord();
      }
    });
  }

  public stopRecording(): void {
    let streamStatus = this.audioProvider.toggleRecord();
  }

  public score(): void {
    this.loadingProvider.startLoading();
    if(localStorage.getItem('practice') === 'true'){
      this.getAsr('')
    } else {
      this.getAsr(this.currentSentence.ipa)
    }
    localStorage.removeItem('activeStep')
  }

  public getAsr(ipa) {
    if(ipa === undefined || ipa === "None") ipa = '';

    this.predictProvider.getAsr(this.currentSentence.content, this.audioProvider.base64$.getValue(), ipa).subscribe(
      asrResponse => {
        this.stateProvider.asrResponse$.next(asrResponse);
        localStorage.setItem('asrResponseData', JSON.stringify(asrResponse));
        this.stateProvider.setStep(2);
        this.loadingProvider.stopLoading();
      },
      error => {
        console.error({error});
        this.loadingProvider.stopLoading();
        if (error) {
          this.errorProvider.errorMessage$.next(error.error.detail);
        } else {
          this.errorProvider.errorMessage$.next('Failed to get simple analysis, please try it again later!');
        }
      },
    );
  }

  public pinSentences() {
    this.loadingProvider.startLoading();
    this.sentenceProvider.postSentencesPin(this.currentSentence.id, this.currentSentence.type, this.savedState).subscribe(pinSentences => {
      const values = Object.keys(pinSentences).map(key => pinSentences[key]);
      this.savedState = values[2];
      this.stateProvider.savedState(this.savedState);
      this.loadingProvider.stopLoading();
      localStorage.setItem('savedState', JSON.stringify(this.savedState))
      this.cdr.detectChanges();
    });
  }

  public reset(): void {
    localStorage.removeItem('activeStep');
    location.href = location.href;
  }

  openDialog(type) {
    this.dialog.open(SpeakDialog,{
      data: {
        type: type
      }
    });
  }
}
